-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2012.2
-- Copyright (C) 2012 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================


library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_arith.all;
use IEEE.std_logic_unsigned.all;

entity encrypt_CipherText_if is
generic (
    IN_BW : integer := 8;
    OUT_BW : integer := 32);
port (
    FSL_Clk       : in    std_logic;
    FSL_Rst       : in    std_logic;
    FSL_M_Clk     : out   std_logic;
    FSL_M_Write   : out   std_logic;
    FSL_M_Data    : out   std_logic_vector(0 to OUT_BW - 1);
    FSL_M_Control : out   std_logic;
    FSL_M_Full    : in    std_logic;
    fifo_full_n : OUT STD_LOGIC;
    fifo_write : IN STD_LOGIC;
    fifo_din : IN STD_LOGIC_VECTOR(IN_BW - 1 downto 0));
end entity;

architecture behav of  encrypt_CipherText_if is
component  encrypt_CipherText_if_fifocore is
port (
    clk : IN STD_LOGIC;
    reset : IN STD_LOGIC;
    if_empty_n : OUT STD_LOGIC;
    if_read : IN STD_LOGIC;
    if_dout : OUT STD_LOGIC_VECTOR(IN_BW - 1 downto 0);
    if_full_n : OUT STD_LOGIC;
    if_write : IN STD_LOGIC;
    if_din : IN STD_LOGIC_VECTOR(IN_BW - 1 downto 0));
end component;

signal   fifo_empty_n : STD_LOGIC;
signal   fifo_read :  STD_LOGIC;
signal   fifo_read_tmp :  STD_LOGIC;
signal   fifo_read_sw0 :  STD_LOGIC;
signal   fifo_read_sw1 :  STD_LOGIC;
signal   fifo_dout : STD_LOGIC_VECTOR(IN_BW - 1 downto 0);
signal   has_data : STD_LOGIC_VECTOR(OUT_BW - 1 downto 0);
signal   fifodata : STD_LOGIC_VECTOR(OUT_BW - 1 downto 0);

constant WORDS : integer := (IN_BW + OUT_BW - 1) / OUT_BW;
constant BUFF_BW : integer := (WORDS * OUT_BW);



type st_type is (idle, read);
signal cs, ns : st_type;

begin

    process (FSL_Clk, FSL_Rst)
    begin
        if (FSL_Rst = '1') then
            cs <= idle;
        else
            if FSL_Clk'event and FSL_Clk = '1' then
                cs <= ns;
            end if;
        end if;
    end process;

    process (cs, FSL_M_Full, fifo_empty_n) 
    begin
        ns <= cs;
        case (cs) is
        when idle =>
            if (FSL_M_Full = '0' and fifo_empty_n = '1') then
                ns <= read;
            end if;
        when read =>
            ns <= idle;
        end case;
    end process;

    fifo_read <= fifo_read_tmp;
    fifodata(IN_BW - 1 downto 0) <= fifo_dout;
    fifodata(OUT_BW - 1 downto IN_BW) <= (others => '0');


    FSL_M_Data <= fifodata;

    fifo_read_tmp <= '1' when cs = read else '0';
    FSL_M_Write <= '1' when cs = read else '0';

    encrypt_CipherText_if_fifocore_U : component encrypt_CipherText_if_fifocore
    port map (
        clk => FSL_Clk,
        reset => FSL_Rst,
        if_empty_n => fifo_empty_n,
        if_read => fifo_read,
        if_dout => fifo_dout,
        if_full_n => fifo_full_n,
        if_write => fifo_write,
        if_din => fifo_din);

end architecture;

