// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2012.2
// Copyright (C) 2012 Xilinx Inc. All rights reserved.
// 
// ==============================================================

`timescale 1 ns / 1 ps
module encrypt_top (
PlainText_FSL_Clk,
PlainText_FSL_Rst,
PlainText_FSL_S_Clk,
PlainText_FSL_S_Read,
PlainText_FSL_S_Data,
PlainText_FSL_S_Control,
PlainText_FSL_S_Exists,
Key_FSL_Clk,
Key_FSL_Rst,
Key_FSL_S_Clk,
Key_FSL_S_Read,
Key_FSL_S_Data,
Key_FSL_S_Control,
Key_FSL_S_Exists,
CipherText_FSL_Clk,
CipherText_FSL_Rst,
CipherText_FSL_M_Clk,
CipherText_FSL_M_Write,
CipherText_FSL_M_Data,
CipherText_FSL_M_Control,
CipherText_FSL_M_Full,
splb_PLB46S_SPLB_Clk,
splb_PLB46S_SPLB_Rst,
splb_PLB46S_PLB_ABus,
splb_PLB46S_PLB_UABus,
splb_PLB46S_PLB_PAValid,
splb_PLB46S_PLB_SAValid,
splb_PLB46S_PLB_rdPrim,
splb_PLB46S_PLB_wrPrim,
splb_PLB46S_PLB_masterID,
splb_PLB46S_PLB_abort,
splb_PLB46S_PLB_busLock,
splb_PLB46S_PLB_RNW,
splb_PLB46S_PLB_BE,
splb_PLB46S_PLB_MSize,
splb_PLB46S_PLB_size,
splb_PLB46S_PLB_type,
splb_PLB46S_PLB_lockErr,
splb_PLB46S_PLB_wrDBus,
splb_PLB46S_PLB_wrBurst,
splb_PLB46S_PLB_rdBurst,
splb_PLB46S_PLB_wrPendReq,
splb_PLB46S_PLB_rdPendReq,
splb_PLB46S_PLB_wrPendPri,
splb_PLB46S_PLB_rdPendPri,
splb_PLB46S_PLB_reqPri,
splb_PLB46S_PLB_TAttribute,
splb_PLB46S_Sl_addrAck,
splb_PLB46S_Sl_SSize,
splb_PLB46S_Sl_wait,
splb_PLB46S_Sl_rearbitrate,
splb_PLB46S_Sl_wrDAck,
splb_PLB46S_Sl_wrComp,
splb_PLB46S_Sl_wrBTerm,
splb_PLB46S_Sl_rdDBus,
splb_PLB46S_Sl_rdWdAddr,
splb_PLB46S_Sl_rdDAck,
splb_PLB46S_Sl_rdComp,
splb_PLB46S_Sl_rdBTerm,
splb_PLB46S_Sl_MBusy,
splb_PLB46S_Sl_MWrErr,
splb_PLB46S_Sl_MRdErr,
splb_PLB46S_Sl_MIRQ,
SYS_RESET,
SYS_CLK
);

parameter C_SPLB_PLB46S_BASEADDR = 32'h00000000;
parameter C_SPLB_PLB46S_HIGHADDR = 32'h0000000F;
parameter C_SPLB_PLB46S_AWIDTH = 32;
parameter C_SPLB_PLB46S_DWIDTH = 32;
parameter C_SPLB_PLB46S_NUM_MASTERS = 8;
parameter C_SPLB_PLB46S_MID_WIDTH = 3;
parameter C_SPLB_PLB46S_NATIVE_DWIDTH = 32;
parameter C_SPLB_PLB46S_P2P = 0;
parameter C_SPLB_PLB46S_SUPPORT_BURSTS = 0;
parameter C_SPLB_PLB46S_SMALLEST_MASTER = 32;
parameter C_SPLB_PLB46S_INCLUDE_DPHASE_TIMER = 0;
parameter RESET_ACTIVE_LOW = 1;
input PlainText_FSL_Clk ;
input PlainText_FSL_Rst ;
output PlainText_FSL_S_Clk ;
output PlainText_FSL_S_Read ;
input [32 - 1:0] PlainText_FSL_S_Data ;
input PlainText_FSL_S_Control ;
input PlainText_FSL_S_Exists ;

input Key_FSL_Clk ;
input Key_FSL_Rst ;
output Key_FSL_S_Clk ;
output Key_FSL_S_Read ;
input [32 - 1:0] Key_FSL_S_Data ;
input Key_FSL_S_Control ;
input Key_FSL_S_Exists ;

input CipherText_FSL_Clk ;
input CipherText_FSL_Rst ;
output CipherText_FSL_M_Clk ;
output CipherText_FSL_M_Write ;
output [32 - 1:0] CipherText_FSL_M_Data ;
output CipherText_FSL_M_Control ;
input CipherText_FSL_M_Full ;

input splb_PLB46S_SPLB_Clk ;
input splb_PLB46S_SPLB_Rst ;
input [32 - 1:0] splb_PLB46S_PLB_ABus ;
input [32 - 1:0] splb_PLB46S_PLB_UABus ;
input splb_PLB46S_PLB_PAValid ;
input splb_PLB46S_PLB_SAValid ;
input splb_PLB46S_PLB_rdPrim ;
input splb_PLB46S_PLB_wrPrim ;
input [C_SPLB_PLB46S_MID_WIDTH - 1:0] splb_PLB46S_PLB_masterID ;
input splb_PLB46S_PLB_abort ;
input splb_PLB46S_PLB_busLock ;
input splb_PLB46S_PLB_RNW ;
input [C_SPLB_PLB46S_DWIDTH/8 - 1:0] splb_PLB46S_PLB_BE ;
input [2 - 1:0] splb_PLB46S_PLB_MSize ;
input [4 - 1:0] splb_PLB46S_PLB_size ;
input [3 - 1:0] splb_PLB46S_PLB_type ;
input splb_PLB46S_PLB_lockErr ;
input [C_SPLB_PLB46S_DWIDTH - 1:0] splb_PLB46S_PLB_wrDBus ;
input splb_PLB46S_PLB_wrBurst ;
input splb_PLB46S_PLB_rdBurst ;
input splb_PLB46S_PLB_wrPendReq ;
input splb_PLB46S_PLB_rdPendReq ;
input [2 - 1:0] splb_PLB46S_PLB_wrPendPri ;
input [2 - 1:0] splb_PLB46S_PLB_rdPendPri ;
input [2 - 1:0] splb_PLB46S_PLB_reqPri ;
input [16 - 1:0] splb_PLB46S_PLB_TAttribute ;
output splb_PLB46S_Sl_addrAck ;
output [2 - 1:0] splb_PLB46S_Sl_SSize ;
output splb_PLB46S_Sl_wait ;
output splb_PLB46S_Sl_rearbitrate ;
output splb_PLB46S_Sl_wrDAck ;
output splb_PLB46S_Sl_wrComp ;
output splb_PLB46S_Sl_wrBTerm ;
output [C_SPLB_PLB46S_DWIDTH - 1:0] splb_PLB46S_Sl_rdDBus ;
output [4 - 1:0] splb_PLB46S_Sl_rdWdAddr ;
output splb_PLB46S_Sl_rdDAck ;
output splb_PLB46S_Sl_rdComp ;
output splb_PLB46S_Sl_rdBTerm ;
output [C_SPLB_PLB46S_NUM_MASTERS - 1:0] splb_PLB46S_Sl_MBusy ;
output [C_SPLB_PLB46S_NUM_MASTERS - 1:0] splb_PLB46S_Sl_MWrErr ;
output [C_SPLB_PLB46S_NUM_MASTERS - 1:0] splb_PLB46S_Sl_MRdErr ;
output [C_SPLB_PLB46S_NUM_MASTERS - 1:0] splb_PLB46S_Sl_MIRQ ;

input SYS_RESET ;

input SYS_CLK ;

wire PlainText_FSL_Clk;
wire PlainText_FSL_Rst;
wire PlainText_FSL_S_Clk;
wire PlainText_FSL_S_Read;
wire [32 - 1:0] PlainText_FSL_S_Data;
wire PlainText_FSL_S_Control;
wire PlainText_FSL_S_Exists;

wire Key_FSL_Clk;
wire Key_FSL_Rst;
wire Key_FSL_S_Clk;
wire Key_FSL_S_Read;
wire [32 - 1:0] Key_FSL_S_Data;
wire Key_FSL_S_Control;
wire Key_FSL_S_Exists;

wire CipherText_FSL_Clk;
wire CipherText_FSL_Rst;
wire CipherText_FSL_M_Clk;
wire CipherText_FSL_M_Write;
wire [32 - 1:0] CipherText_FSL_M_Data;
wire CipherText_FSL_M_Control;
wire CipherText_FSL_M_Full;

wire splb_PLB46S_SPLB_Clk;
wire splb_PLB46S_SPLB_Rst;
wire [32 - 1:0] splb_PLB46S_PLB_ABus;
wire [32 - 1:0] splb_PLB46S_PLB_UABus;
wire splb_PLB46S_PLB_PAValid;
wire splb_PLB46S_PLB_SAValid;
wire splb_PLB46S_PLB_rdPrim;
wire splb_PLB46S_PLB_wrPrim;
wire [C_SPLB_PLB46S_MID_WIDTH - 1:0] splb_PLB46S_PLB_masterID;
wire splb_PLB46S_PLB_abort;
wire splb_PLB46S_PLB_busLock;
wire splb_PLB46S_PLB_RNW;
wire [C_SPLB_PLB46S_DWIDTH/8 - 1:0] splb_PLB46S_PLB_BE;
wire [2 - 1:0] splb_PLB46S_PLB_MSize;
wire [4 - 1:0] splb_PLB46S_PLB_size;
wire [3 - 1:0] splb_PLB46S_PLB_type;
wire splb_PLB46S_PLB_lockErr;
wire [C_SPLB_PLB46S_DWIDTH - 1:0] splb_PLB46S_PLB_wrDBus;
wire splb_PLB46S_PLB_wrBurst;
wire splb_PLB46S_PLB_rdBurst;
wire splb_PLB46S_PLB_wrPendReq;
wire splb_PLB46S_PLB_rdPendReq;
wire [2 - 1:0] splb_PLB46S_PLB_wrPendPri;
wire [2 - 1:0] splb_PLB46S_PLB_rdPendPri;
wire [2 - 1:0] splb_PLB46S_PLB_reqPri;
wire [16 - 1:0] splb_PLB46S_PLB_TAttribute;
wire splb_PLB46S_Sl_addrAck;
wire [2 - 1:0] splb_PLB46S_Sl_SSize;
wire splb_PLB46S_Sl_wait;
wire splb_PLB46S_Sl_rearbitrate;
wire splb_PLB46S_Sl_wrDAck;
wire splb_PLB46S_Sl_wrComp;
wire splb_PLB46S_Sl_wrBTerm;
wire [C_SPLB_PLB46S_DWIDTH - 1:0] splb_PLB46S_Sl_rdDBus;
wire [4 - 1:0] splb_PLB46S_Sl_rdWdAddr;
wire splb_PLB46S_Sl_rdDAck;
wire splb_PLB46S_Sl_rdComp;
wire splb_PLB46S_Sl_rdBTerm;
wire [C_SPLB_PLB46S_NUM_MASTERS - 1:0] splb_PLB46S_Sl_MBusy;
wire [C_SPLB_PLB46S_NUM_MASTERS - 1:0] splb_PLB46S_Sl_MWrErr;
wire [C_SPLB_PLB46S_NUM_MASTERS - 1:0] splb_PLB46S_Sl_MRdErr;
wire [C_SPLB_PLB46S_NUM_MASTERS - 1:0] splb_PLB46S_Sl_MIRQ;

wire SYS_RESET;


wire [8 - 1:0] sig_encrypt_PlainText_dout;
wire sig_encrypt_PlainText_empty_n;
wire sig_encrypt_PlainText_read;

wire [8 - 1:0] sig_encrypt_Key_dout;
wire sig_encrypt_Key_empty_n;
wire sig_encrypt_Key_read;

wire [8 - 1:0] sig_encrypt_CipherText_din;
wire sig_encrypt_CipherText_full_n;
wire sig_encrypt_CipherText_write;

wire sig_encrypt_ap_start;
wire sig_encrypt_ap_done;
wire sig_encrypt_ap_idle;

wire sig_encrypt_ap_rst;




encrypt encrypt_U(
    .PlainText_dout(sig_encrypt_PlainText_dout),
    .PlainText_empty_n(sig_encrypt_PlainText_empty_n),
    .PlainText_read(sig_encrypt_PlainText_read),
    .Key_dout(sig_encrypt_Key_dout),
    .Key_empty_n(sig_encrypt_Key_empty_n),
    .Key_read(sig_encrypt_Key_read),
    .CipherText_din(sig_encrypt_CipherText_din),
    .CipherText_full_n(sig_encrypt_CipherText_full_n),
    .CipherText_write(sig_encrypt_CipherText_write),
    .ap_start(sig_encrypt_ap_start),
    .ap_done(sig_encrypt_ap_done),
    .ap_idle(sig_encrypt_ap_idle),
    .ap_rst(sig_encrypt_ap_rst),
    .ap_clk(SYS_CLK)
);

encrypt_PlainText_if PlainText_if_U(
    .fifo_empty_n(sig_encrypt_PlainText_empty_n),
    .fifo_read(sig_encrypt_PlainText_read),
    .fifo_dout(sig_encrypt_PlainText_dout),
    .FSL_Clk(PlainText_FSL_Clk),
    .FSL_Rst(PlainText_FSL_Rst),
    .FSL_S_Clk(PlainText_FSL_S_Clk),
    .FSL_S_Read(PlainText_FSL_S_Read),
    .FSL_S_Data(PlainText_FSL_S_Data),
    .FSL_S_Control(PlainText_FSL_S_Control),
    .FSL_S_Exists(PlainText_FSL_S_Exists));

encrypt_Key_if Key_if_U(
    .fifo_empty_n(sig_encrypt_Key_empty_n),
    .fifo_read(sig_encrypt_Key_read),
    .fifo_dout(sig_encrypt_Key_dout),
    .FSL_Clk(Key_FSL_Clk),
    .FSL_Rst(Key_FSL_Rst),
    .FSL_S_Clk(Key_FSL_S_Clk),
    .FSL_S_Read(Key_FSL_S_Read),
    .FSL_S_Data(Key_FSL_S_Data),
    .FSL_S_Control(Key_FSL_S_Control),
    .FSL_S_Exists(Key_FSL_S_Exists));

encrypt_CipherText_if CipherText_if_U(
    .fifo_full_n(sig_encrypt_CipherText_full_n),
    .fifo_write(sig_encrypt_CipherText_write),
    .fifo_din(sig_encrypt_CipherText_din),
    .FSL_Clk(CipherText_FSL_Clk),
    .FSL_Rst(CipherText_FSL_Rst),
    .FSL_M_Clk(CipherText_FSL_M_Clk),
    .FSL_M_Write(CipherText_FSL_M_Write),
    .FSL_M_Data(CipherText_FSL_M_Data),
    .FSL_M_Control(CipherText_FSL_M_Control),
    .FSL_M_Full(CipherText_FSL_M_Full));

PLB46S_if #(
    .C_BASEADDR(C_SPLB_PLB46S_BASEADDR),
    .C_HIGHADDR(C_SPLB_PLB46S_HIGHADDR),
    .C_SPLB_AWIDTH(C_SPLB_PLB46S_AWIDTH),
    .C_SPLB_DWIDTH(C_SPLB_PLB46S_DWIDTH),
    .C_SPLB_NUM_MASTERS(C_SPLB_PLB46S_NUM_MASTERS),
    .C_SPLB_MID_WIDTH(C_SPLB_PLB46S_MID_WIDTH),
    .C_SPLB_NATIVE_DWIDTH(C_SPLB_PLB46S_NATIVE_DWIDTH),
    .C_SPLB_P2P(C_SPLB_PLB46S_P2P),
    .C_SPLB_SUPPORT_BURSTS(C_SPLB_PLB46S_SUPPORT_BURSTS),
    .C_SPLB_SMALLEST_MASTER(C_SPLB_PLB46S_SMALLEST_MASTER),
    .C_INCLUDE_DPHASE_TIMER(C_SPLB_PLB46S_INCLUDE_DPHASE_TIMER))
PLB46S_if_U(
    .DOUT_ap_start(sig_encrypt_ap_start),
    .DIN_ap_done(sig_encrypt_ap_done),
    .DIN_ap_idle(sig_encrypt_ap_idle),
    .SPLB_Clk(splb_PLB46S_SPLB_Clk),
    .SPLB_Rst(splb_PLB46S_SPLB_Rst),
    .PLB_ABus(splb_PLB46S_PLB_ABus),
    .PLB_UABus(splb_PLB46S_PLB_UABus),
    .PLB_PAValid(splb_PLB46S_PLB_PAValid),
    .PLB_SAValid(splb_PLB46S_PLB_SAValid),
    .PLB_rdPrim(splb_PLB46S_PLB_rdPrim),
    .PLB_wrPrim(splb_PLB46S_PLB_wrPrim),
    .PLB_masterID(splb_PLB46S_PLB_masterID),
    .PLB_abort(splb_PLB46S_PLB_abort),
    .PLB_busLock(splb_PLB46S_PLB_busLock),
    .PLB_RNW(splb_PLB46S_PLB_RNW),
    .PLB_BE(splb_PLB46S_PLB_BE),
    .PLB_MSize(splb_PLB46S_PLB_MSize),
    .PLB_size(splb_PLB46S_PLB_size),
    .PLB_type(splb_PLB46S_PLB_type),
    .PLB_lockErr(splb_PLB46S_PLB_lockErr),
    .PLB_wrDBus(splb_PLB46S_PLB_wrDBus),
    .PLB_wrBurst(splb_PLB46S_PLB_wrBurst),
    .PLB_rdBurst(splb_PLB46S_PLB_rdBurst),
    .PLB_wrPendReq(splb_PLB46S_PLB_wrPendReq),
    .PLB_rdPendReq(splb_PLB46S_PLB_rdPendReq),
    .PLB_wrPendPri(splb_PLB46S_PLB_wrPendPri),
    .PLB_rdPendPri(splb_PLB46S_PLB_rdPendPri),
    .PLB_reqPri(splb_PLB46S_PLB_reqPri),
    .PLB_TAttribute(splb_PLB46S_PLB_TAttribute),
    .Sl_addrAck(splb_PLB46S_Sl_addrAck),
    .Sl_SSize(splb_PLB46S_Sl_SSize),
    .Sl_wait(splb_PLB46S_Sl_wait),
    .Sl_rearbitrate(splb_PLB46S_Sl_rearbitrate),
    .Sl_wrDAck(splb_PLB46S_Sl_wrDAck),
    .Sl_wrComp(splb_PLB46S_Sl_wrComp),
    .Sl_wrBTerm(splb_PLB46S_Sl_wrBTerm),
    .Sl_rdDBus(splb_PLB46S_Sl_rdDBus),
    .Sl_rdWdAddr(splb_PLB46S_Sl_rdWdAddr),
    .Sl_rdDAck(splb_PLB46S_Sl_rdDAck),
    .Sl_rdComp(splb_PLB46S_Sl_rdComp),
    .Sl_rdBTerm(splb_PLB46S_Sl_rdBTerm),
    .Sl_MBusy(splb_PLB46S_Sl_MBusy),
    .Sl_MWrErr(splb_PLB46S_Sl_MWrErr),
    .Sl_MRdErr(splb_PLB46S_Sl_MRdErr),
    .Sl_MIRQ(splb_PLB46S_Sl_MIRQ));

encrypt_ap_rst_if #(
    .RESET_ACTIVE_LOW(RESET_ACTIVE_LOW))
ap_rst_if_U(
    .dout(sig_encrypt_ap_rst),
    .din(SYS_RESET));

endmodule
