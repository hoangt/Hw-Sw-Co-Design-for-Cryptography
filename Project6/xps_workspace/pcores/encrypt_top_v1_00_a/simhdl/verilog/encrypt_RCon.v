// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2012.2
// Copyright (C) 2012 Xilinx Inc. All rights reserved.
// 
// ==============================================================



`timescale 1 ns / 1 ps




module encrypt_RCon_core (q, ra, ce, reset, clk
);
    parameter READ_PORT_COUNT=32'd1;
    parameter WRITE_PORT_COUNT=32'd1;
    parameter DATA_WIDTH=32'd8;
    parameter ADDRESS_WIDTH=32'd4;
    parameter WORD_COUNT=32'd10;

    output [READ_PORT_COUNT*DATA_WIDTH-1:0] q;
    input [READ_PORT_COUNT*ADDRESS_WIDTH-1:0]  ra;
    input [READ_PORT_COUNT-1:0]  ce;
    input                                      reset;
    input                                      clk;

    integer                                    i,j;

    wire [DATA_WIDTH-1:0]                       mem [0:WORD_COUNT-1];
    reg [ADDRESS_WIDTH-1:0]                    rat;
    reg [ADDRESS_WIDTH-1:0]                    rai [READ_PORT_COUNT-1:0];
    reg [ADDRESS_WIDTH-1:0]                    rai_reg [READ_PORT_COUNT-1:0];


    genvar k;

    assign mem[0] = 8'b00000001;
    assign mem[1] = 8'b00000010;
    assign mem[2] = 8'b00000100;
    assign mem[3] = 8'b00001000;
    assign mem[4] = 8'b00010000;
    assign mem[5] = 8'b00100000;
    assign mem[6] = 8'b01000000;
    assign mem[7] = 8'b10000000;
    assign mem[8] = 8'b00011011;
    assign mem[9] = 8'b00110110;


    // Split read addresses
    always @ (ra) begin
        for (i=0;i<READ_PORT_COUNT;i=i+1) begin
            for (j=0;j<ADDRESS_WIDTH;j=j+1) begin
                rat[j]=ra[i*ADDRESS_WIDTH+j];
            end
            rai[i]=rat;
        end
    end

    // guide read addresses using CE
    always @ (posedge clk) begin
        for (i=0;i<READ_PORT_COUNT;i=i+1) begin
            if ( ce[i] ) begin
                rai_reg[i] <= rai[i];
            end
        end
    end


    // Memory read
    genvar x;
    generate
        for (x = 0; x < READ_PORT_COUNT; x = x + 1) begin : gen_q
            assign q[x*DATA_WIDTH+DATA_WIDTH-1:x*DATA_WIDTH] = (rai_reg[x]<WORD_COUNT)?
                mem[rai_reg[x]] : {DATA_WIDTH{1'b0}};
        end
    endgenerate

endmodule


module encrypt_RCon (
    address0,
    ce0,
    q0,


    reset,
    clk);


parameter DataWidth = 32'd8;
parameter AddressRange = 32'd10;
parameter AddressWidth = 32'd4;

input[AddressWidth-1:0] address0;
input ce0;
output[DataWidth-1:0] q0;
input reset;
input clk;


reg[DataWidth-1:0] q0;
wire[1 * DataWidth - 1:0] mem_q;
wire[DataWidth - 1:0] mem_q0;
wire[1 * AddressWidth - 1:0]  mem_ra;
wire[1 - 1:0]  mem_ce;


encrypt_RCon_core #(
    .READ_PORT_COUNT( 1 ),
    .WRITE_PORT_COUNT( 1 ),
    .DATA_WIDTH( DataWidth ),
    .ADDRESS_WIDTH( AddressWidth ),
    .WORD_COUNT( AddressRange ))
core_inst (
    .q( mem_q ),
    .ra( mem_ra ),
    .ce( mem_ce ),
    .reset( reset ),
    .clk( clk ));


assign mem_q0 =  mem_q[1 * DataWidth - 1 : 0 * DataWidth];

always @ (mem_q0) begin
        q0 = mem_q0;
end

assign mem_ra = {address0};
assign mem_ce = {ce0};



endmodule
