// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2012.2
// Copyright (C) 2012 Xilinx Inc. All rights reserved.
// 
// ==============================================================



`timescale 1 ns / 1 ps




module encrypt_SBox_core (q, ra, ce, reset, clk
);
    parameter READ_PORT_COUNT=32'd2;
    parameter WRITE_PORT_COUNT=32'd1;
    parameter DATA_WIDTH=32'd8;
    parameter ADDRESS_WIDTH=32'd8;
    parameter WORD_COUNT=32'd256;

    output [READ_PORT_COUNT*DATA_WIDTH-1:0] q;
    input [READ_PORT_COUNT*ADDRESS_WIDTH-1:0]  ra;
    input [READ_PORT_COUNT-1:0]  ce;
    input                                      reset;
    input                                      clk;

    integer                                    i,j;

    wire [DATA_WIDTH-1:0]                       mem [0:WORD_COUNT-1];
    reg [ADDRESS_WIDTH-1:0]                    rat;
    reg [ADDRESS_WIDTH-1:0]                    rai [READ_PORT_COUNT-1:0];
    reg [ADDRESS_WIDTH-1:0]                    rai_reg [READ_PORT_COUNT-1:0];


    genvar k;

    assign mem[0] = 8'b01100011;
    assign mem[1] = 8'b01111100;
    assign mem[2] = 8'b01110111;
    assign mem[3] = 8'b01111011;
    assign mem[4] = 8'b11110010;
    assign mem[5] = 8'b01101011;
    assign mem[6] = 8'b01101111;
    assign mem[7] = 8'b11000101;
    assign mem[8] = 8'b00110000;
    assign mem[9] = 8'b00000001;
    assign mem[10] = 8'b01100111;
    assign mem[11] = 8'b00101011;
    assign mem[12] = 8'b11111110;
    assign mem[13] = 8'b11010111;
    assign mem[14] = 8'b10101011;
    assign mem[15] = 8'b01110110;
    assign mem[16] = 8'b11001010;
    assign mem[17] = 8'b10000010;
    assign mem[18] = 8'b11001001;
    assign mem[19] = 8'b01111101;
    assign mem[20] = 8'b11111010;
    assign mem[21] = 8'b01011001;
    assign mem[22] = 8'b01000111;
    assign mem[23] = 8'b11110000;
    assign mem[24] = 8'b10101101;
    assign mem[25] = 8'b11010100;
    assign mem[26] = 8'b10100010;
    assign mem[27] = 8'b10101111;
    assign mem[28] = 8'b10011100;
    assign mem[29] = 8'b10100100;
    assign mem[30] = 8'b01110010;
    assign mem[31] = 8'b11000000;
    assign mem[32] = 8'b10110111;
    assign mem[33] = 8'b11111101;
    assign mem[34] = 8'b10010011;
    assign mem[35] = 8'b00100110;
    assign mem[36] = 8'b00110110;
    assign mem[37] = 8'b00111111;
    assign mem[38] = 8'b11110111;
    assign mem[39] = 8'b11001100;
    assign mem[40] = 8'b00110100;
    assign mem[41] = 8'b10100101;
    assign mem[42] = 8'b11100101;
    assign mem[43] = 8'b11110001;
    assign mem[44] = 8'b01110001;
    assign mem[45] = 8'b11011000;
    assign mem[46] = 8'b00110001;
    assign mem[47] = 8'b00010101;
    assign mem[48] = 8'b00000100;
    assign mem[49] = 8'b11000111;
    assign mem[50] = 8'b00100011;
    assign mem[51] = 8'b11000011;
    assign mem[52] = 8'b00011000;
    assign mem[53] = 8'b10010110;
    assign mem[54] = 8'b00000101;
    assign mem[55] = 8'b10011010;
    assign mem[56] = 8'b00000111;
    assign mem[57] = 8'b00010010;
    assign mem[58] = 8'b10000000;
    assign mem[59] = 8'b11100010;
    assign mem[60] = 8'b11101011;
    assign mem[61] = 8'b00100111;
    assign mem[62] = 8'b10110010;
    assign mem[63] = 8'b01110101;
    assign mem[64] = 8'b00001001;
    assign mem[65] = 8'b10000011;
    assign mem[66] = 8'b00101100;
    assign mem[67] = 8'b00011010;
    assign mem[68] = 8'b00011011;
    assign mem[69] = 8'b01101110;
    assign mem[70] = 8'b01011010;
    assign mem[71] = 8'b10100000;
    assign mem[72] = 8'b01010010;
    assign mem[73] = 8'b00111011;
    assign mem[74] = 8'b11010110;
    assign mem[75] = 8'b10110011;
    assign mem[76] = 8'b00101001;
    assign mem[77] = 8'b11100011;
    assign mem[78] = 8'b00101111;
    assign mem[79] = 8'b10000100;
    assign mem[80] = 8'b01010011;
    assign mem[81] = 8'b11010001;
    assign mem[82] = 8'b00000000;
    assign mem[83] = 8'b11101101;
    assign mem[84] = 8'b00100000;
    assign mem[85] = 8'b11111100;
    assign mem[86] = 8'b10110001;
    assign mem[87] = 8'b01011011;
    assign mem[88] = 8'b01101010;
    assign mem[89] = 8'b11001011;
    assign mem[90] = 8'b10111110;
    assign mem[91] = 8'b00111001;
    assign mem[92] = 8'b01001010;
    assign mem[93] = 8'b01001100;
    assign mem[94] = 8'b01011000;
    assign mem[95] = 8'b11001111;
    assign mem[96] = 8'b11010000;
    assign mem[97] = 8'b11101111;
    assign mem[98] = 8'b10101010;
    assign mem[99] = 8'b11111011;
    assign mem[100] = 8'b01000011;
    assign mem[101] = 8'b01001101;
    assign mem[102] = 8'b00110011;
    assign mem[103] = 8'b10000101;
    assign mem[104] = 8'b01000101;
    assign mem[105] = 8'b11111001;
    assign mem[106] = 8'b00000010;
    assign mem[107] = 8'b01111111;
    assign mem[108] = 8'b01010000;
    assign mem[109] = 8'b00111100;
    assign mem[110] = 8'b10011111;
    assign mem[111] = 8'b10101000;
    assign mem[112] = 8'b01010001;
    assign mem[113] = 8'b10100011;
    assign mem[114] = 8'b01000000;
    assign mem[115] = 8'b10001111;
    assign mem[116] = 8'b10010010;
    assign mem[117] = 8'b10011101;
    assign mem[118] = 8'b00111000;
    assign mem[119] = 8'b11110101;
    assign mem[120] = 8'b10111100;
    assign mem[121] = 8'b10110110;
    assign mem[122] = 8'b11011010;
    assign mem[123] = 8'b00100001;
    assign mem[124] = 8'b00010000;
    assign mem[125] = 8'b11111111;
    assign mem[126] = 8'b11110011;
    assign mem[127] = 8'b11010010;
    assign mem[128] = 8'b11001101;
    assign mem[129] = 8'b00001100;
    assign mem[130] = 8'b00010011;
    assign mem[131] = 8'b11101100;
    assign mem[132] = 8'b01011111;
    assign mem[133] = 8'b10010111;
    assign mem[134] = 8'b01000100;
    assign mem[135] = 8'b00010111;
    assign mem[136] = 8'b11000100;
    assign mem[137] = 8'b10100111;
    assign mem[138] = 8'b01111110;
    assign mem[139] = 8'b00111101;
    assign mem[140] = 8'b01100100;
    assign mem[141] = 8'b01011101;
    assign mem[142] = 8'b00011001;
    assign mem[143] = 8'b01110011;
    assign mem[144] = 8'b01100000;
    assign mem[145] = 8'b10000001;
    assign mem[146] = 8'b01001111;
    assign mem[147] = 8'b11011100;
    assign mem[148] = 8'b00100010;
    assign mem[149] = 8'b00101010;
    assign mem[150] = 8'b10010000;
    assign mem[151] = 8'b10001000;
    assign mem[152] = 8'b01000110;
    assign mem[153] = 8'b11101110;
    assign mem[154] = 8'b10111000;
    assign mem[155] = 8'b00010100;
    assign mem[156] = 8'b11011110;
    assign mem[157] = 8'b01011110;
    assign mem[158] = 8'b00001011;
    assign mem[159] = 8'b11011011;
    assign mem[160] = 8'b11100000;
    assign mem[161] = 8'b00110010;
    assign mem[162] = 8'b00111010;
    assign mem[163] = 8'b00001010;
    assign mem[164] = 8'b01001001;
    assign mem[165] = 8'b00000110;
    assign mem[166] = 8'b00100100;
    assign mem[167] = 8'b01011100;
    assign mem[168] = 8'b11000010;
    assign mem[169] = 8'b11010011;
    assign mem[170] = 8'b10101100;
    assign mem[171] = 8'b01100010;
    assign mem[172] = 8'b10010001;
    assign mem[173] = 8'b10010101;
    assign mem[174] = 8'b11100100;
    assign mem[175] = 8'b01111001;
    assign mem[176] = 8'b11100111;
    assign mem[177] = 8'b11001000;
    assign mem[178] = 8'b00110111;
    assign mem[179] = 8'b01101101;
    assign mem[180] = 8'b10001101;
    assign mem[181] = 8'b11010101;
    assign mem[182] = 8'b01001110;
    assign mem[183] = 8'b10101001;
    assign mem[184] = 8'b01101100;
    assign mem[185] = 8'b01010110;
    assign mem[186] = 8'b11110100;
    assign mem[187] = 8'b11101010;
    assign mem[188] = 8'b01100101;
    assign mem[189] = 8'b01111010;
    assign mem[190] = 8'b10101110;
    assign mem[191] = 8'b00001000;
    assign mem[192] = 8'b10111010;
    assign mem[193] = 8'b01111000;
    assign mem[194] = 8'b00100101;
    assign mem[195] = 8'b00101110;
    assign mem[196] = 8'b00011100;
    assign mem[197] = 8'b10100110;
    assign mem[198] = 8'b10110100;
    assign mem[199] = 8'b11000110;
    assign mem[200] = 8'b11101000;
    assign mem[201] = 8'b11011101;
    assign mem[202] = 8'b01110100;
    assign mem[203] = 8'b00011111;
    assign mem[204] = 8'b01001011;
    assign mem[205] = 8'b10111101;
    assign mem[206] = 8'b10001011;
    assign mem[207] = 8'b10001010;
    assign mem[208] = 8'b01110000;
    assign mem[209] = 8'b00111110;
    assign mem[210] = 8'b10110101;
    assign mem[211] = 8'b01100110;
    assign mem[212] = 8'b01001000;
    assign mem[213] = 8'b00000011;
    assign mem[214] = 8'b11110110;
    assign mem[215] = 8'b00001110;
    assign mem[216] = 8'b01100001;
    assign mem[217] = 8'b00110101;
    assign mem[218] = 8'b01010111;
    assign mem[219] = 8'b10111001;
    assign mem[220] = 8'b10000110;
    assign mem[221] = 8'b11000001;
    assign mem[222] = 8'b00011101;
    assign mem[223] = 8'b10011110;
    assign mem[224] = 8'b11100001;
    assign mem[225] = 8'b11111000;
    assign mem[226] = 8'b10011000;
    assign mem[227] = 8'b00010001;
    assign mem[228] = 8'b01101001;
    assign mem[229] = 8'b11011001;
    assign mem[230] = 8'b10001110;
    assign mem[231] = 8'b10010100;
    assign mem[232] = 8'b10011011;
    assign mem[233] = 8'b00011110;
    assign mem[234] = 8'b10000111;
    assign mem[235] = 8'b11101001;
    assign mem[236] = 8'b11001110;
    assign mem[237] = 8'b01010101;
    assign mem[238] = 8'b00101000;
    assign mem[239] = 8'b11011111;
    assign mem[240] = 8'b10001100;
    assign mem[241] = 8'b10100001;
    assign mem[242] = 8'b10001001;
    assign mem[243] = 8'b00001101;
    assign mem[244] = 8'b10111111;
    assign mem[245] = 8'b11100110;
    assign mem[246] = 8'b01000010;
    assign mem[247] = 8'b01101000;
    assign mem[248] = 8'b01000001;
    assign mem[249] = 8'b10011001;
    assign mem[250] = 8'b00101101;
    assign mem[251] = 8'b00001111;
    assign mem[252] = 8'b10110000;
    assign mem[253] = 8'b01010100;
    assign mem[254] = 8'b10111011;
    assign mem[255] = 8'b00010110;


    // Split read addresses
    always @ (ra) begin
        for (i=0;i<READ_PORT_COUNT;i=i+1) begin
            for (j=0;j<ADDRESS_WIDTH;j=j+1) begin
                rat[j]=ra[i*ADDRESS_WIDTH+j];
            end
            rai[i]=rat;
        end
    end

    // guide read addresses using CE
    always @ (posedge clk) begin
        for (i=0;i<READ_PORT_COUNT;i=i+1) begin
            if ( ce[i] ) begin
                rai_reg[i] <= rai[i];
            end
        end
    end


    // Memory read
    genvar x;
    generate
        for (x = 0; x < READ_PORT_COUNT; x = x + 1) begin : gen_q
            assign q[x*DATA_WIDTH+DATA_WIDTH-1:x*DATA_WIDTH] = (rai_reg[x]<WORD_COUNT)?
                mem[rai_reg[x]] : {DATA_WIDTH{1'b0}};
        end
    endgenerate

endmodule


module encrypt_SBox (
    address0,
    ce0,
    q0,

    address1,
    ce1,
    q1,

    reset,
    clk);


parameter DataWidth = 32'd8;
parameter AddressRange = 32'd256;
parameter AddressWidth = 32'd8;

input[AddressWidth-1:0] address0;
input ce0;
output[DataWidth-1:0] q0;
input[AddressWidth-1:0] address1;
input ce1;
output[DataWidth-1:0] q1;
input reset;
input clk;


reg[DataWidth-1:0] q0;
reg[DataWidth-1:0] q1;
wire[2 * DataWidth - 1:0] mem_q;
wire[DataWidth - 1:0] mem_q0;
wire[DataWidth - 1:0] mem_q1;
wire[2 * AddressWidth - 1:0]  mem_ra;
wire[2 - 1:0]  mem_ce;


encrypt_SBox_core #(
    .READ_PORT_COUNT( 2 ),
    .WRITE_PORT_COUNT( 1 ),
    .DATA_WIDTH( DataWidth ),
    .ADDRESS_WIDTH( AddressWidth ),
    .WORD_COUNT( AddressRange ))
core_inst (
    .q( mem_q ),
    .ra( mem_ra ),
    .ce( mem_ce ),
    .reset( reset ),
    .clk( clk ));


assign mem_q0 =  mem_q[2 * DataWidth - 1 : 1 * DataWidth];

always @ (mem_q0) begin
        q0 = mem_q0;
end

assign mem_q1 =  mem_q[1 * DataWidth - 1 : 0 * DataWidth];

always @ (mem_q1) begin
        q1 = mem_q1;
end

assign mem_ra = {address0, address1};
assign mem_ce = {ce0, ce1};



endmodule
